// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    /** 
     * Multiplexor:
     * out = a if sel == 0
     *       b otherwise
     */

    /* sel == 00 */

    Not(in=sel[0], out=sel000a);
    Not(in=sel[1], out=sel000b);
    And(a=sel000a, b=sel000b, out=sel00);

    /**
    * sel == 01
    * sel[1] == the 0 in 01
    * sel[0] == the 1 in 01
    */

    Not(in=sel[1], out=sel011);
    And(a=sel011, b=sel[0], out=sel01);

    Mux(a=a[0], b=b[0], sel=sel01, out=muxAB0);
    Mux(a=a[1], b=b[1], sel=sel01, out=muxAB1);
    Mux(a=a[2], b=b[2], sel=sel01, out=muxAB2);
    Mux(a=a[3], b=b[3], sel=sel01, out=muxAB3);
    Mux(a=a[4], b=b[4], sel=sel01, out=muxAB4);
    Mux(a=a[5], b=b[5], sel=sel01, out=muxAB5);
    Mux(a=a[6], b=b[6], sel=sel01, out=muxAB6);
    Mux(a=a[7], b=b[7], sel=sel01, out=muxAB7);
    Mux(a=a[8], b=b[8], sel=sel01, out=muxAB8);
    Mux(a=a[9], b=b[9], sel=sel01, out=muxAB9);
    Mux(a=a[10], b=b[10], sel=sel01, out=muxAB10);
    Mux(a=a[11], b=b[11], sel=sel01, out=muxAB11);
    Mux(a=a[12], b=b[12], sel=sel01, out=muxAB12);
    Mux(a=a[13], b=b[13], sel=sel01, out=muxAB13);
    Mux(a=a[14], b=b[14], sel=sel01, out=muxAB14);
    Mux(a=a[15], b=b[15], sel=sel01, out=muxAB15);

    /**
    * sel == 10
    * sel[0] == the 0 in 10
    * sel[1] == the 1 in 10
    */

    Not(in=sel[0], out=sel101);
    And(a=sel[1], b=sel101, out=sel10);

    /* sel == 11 */

    And(a=sel[0], b=sel[1], out=sel11);

    Mux(a=c[0], b=d[0], sel=sel11, out=muxCD0);
    Mux(a=c[1], b=d[1], sel=sel11, out=muxCD1);
    Mux(a=c[2], b=d[2], sel=sel11, out=muxCD2);
    Mux(a=c[3], b=d[3], sel=sel11, out=muxCD3);
    Mux(a=c[4], b=d[4], sel=sel11, out=muxCD4);
    Mux(a=c[5], b=d[5], sel=sel11, out=muxCD5);
    Mux(a=c[6], b=d[6], sel=sel11, out=muxCD6);
    Mux(a=c[7], b=d[7], sel=sel11, out=muxCD7);
    Mux(a=c[8], b=d[8], sel=sel11, out=muxCD8);
    Mux(a=c[9], b=d[9], sel=sel11, out=muxCD9);
    Mux(a=c[10], b=d[10], sel=sel11, out=muxCD10);
    Mux(a=c[11], b=d[11], sel=sel11, out=muxCD11);
    Mux(a=c[12], b=d[12], sel=sel11, out=muxCD12);
    Mux(a=c[13], b=d[13], sel=sel11, out=muxCD13);
    Mux(a=c[14], b=d[14], sel=sel11, out=muxCD14);
    Mux(a=c[15], b=d[15], sel=sel11, out=muxCD15);

    /* sel == 00 or sel == 01 */

    Or(a=sel00, b=sel01, out=sel00Or01);

    /* sel == 10 or sel == 11 */

    Or(a=sel10, b=sel11, out=sel10Or11);

    Mux(a=muxAB0, b=muxCD0, sel=sel10Or11, out=out[0]);
    Mux(a=muxAB1, b=muxCD1, sel=sel10Or11, out=out[1]);
    Mux(a=muxAB2, b=muxCD2, sel=sel10Or11, out=out[2]);
    Mux(a=muxAB3, b=muxCD3, sel=sel10Or11, out=out[3]);
    Mux(a=muxAB4, b=muxCD4, sel=sel10Or11, out=out[4]);
    Mux(a=muxAB5, b=muxCD5, sel=sel10Or11, out=out[5]);
    Mux(a=muxAB6, b=muxCD6, sel=sel10Or11, out=out[6]);
    Mux(a=muxAB7, b=muxCD7, sel=sel10Or11, out=out[7]);
    Mux(a=muxAB8, b=muxCD8, sel=sel10Or11, out=out[8]);
    Mux(a=muxAB9, b=muxCD9, sel=sel10Or11, out=out[9]);
    Mux(a=muxAB10, b=muxCD10, sel=sel10Or11, out=out[10]);
    Mux(a=muxAB11, b=muxCD11, sel=sel10Or11, out=out[11]);
    Mux(a=muxAB12, b=muxCD12, sel=sel10Or11, out=out[12]);
    Mux(a=muxAB13, b=muxCD13, sel=sel10Or11, out=out[13]);
    Mux(a=muxAB14, b=muxCD14, sel=sel10Or11, out=out[14]);
    Mux(a=muxAB15, b=muxCD15, sel=sel10Or11, out=out[15]);
}